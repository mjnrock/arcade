DamageSource:
	☐ `ability <Ability>`
	☐ `source <Entity>`
	☐ `modifier <Map<Enum, fn({...})>>`
		☐ Pass this as a parameter to the `Action.exec` method\
		☐ test

Standardized Ability Management:
	Process:
		✔ Get abilities @done(24-05-16 20:04)
		✔ Instantiate Ability @done(24-05-16 20:04)
		✔ Validate Costs, Pay @done(24-05-16 20:04)
		✔ Summon Entity @done(24-05-16 20:04)
		✔ From here, normal collision mechanics take over @done(24-05-16 20:04)
	✔ Nuanced source Entity handling @done(24-05-15 16:40)
	✔ Collision Resolution: @done(24-05-15 16:40)
		✔ Paradigm to differentiate things like "heal the source entity" vs "don't apply to source entity" and such @done(24-05-15 16:40)

Cooldowns:
	✔ Incorporate cooldowns into the pay structure @done(24-05-19 20:23)
		✔ On `pay`, check if `.status === true` @done(24-05-19 20:23)
	✔ Add `cooldown` method to Ability @done(24-05-19 20:24)
		✔ Override in descendants to provide custom cooldown logic @done(24-05-19 20:24)
		✔ Should be a Resource of time, decrementing each tick @done(24-05-19 20:24)
			✔ `status` should return `true` if the cooldown is 0 @done(24-05-19 20:24)

Actionables viz. Routing:
	Actions:
	Receivers: